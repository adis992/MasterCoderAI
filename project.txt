Project Change Log
===================

1. Repository Restructure
   - Created `backend/`, `frontend/`, and `shared/` directories
   - Moved existing Python server code, data, scripts, models, experiments, monitoring, etc. into `backend/`
   - Moved React web UI (`webui/`) into `frontend/webui/`
   - Created empty `shared/` for common resources (documentation moved here)
   *Reason:* Clear separation of concerns between server, client, and shared assets

2. Path and Config Updates
   - Updated all Python scripts (`*.py`) to use `../data/...` paths
   - Modified `Makefile`, `setup.sh`, `docker-compose.yml` to reference new folder layout
   - Renamed `rename_folders.sh` to `cleanup.sh` and replaced functionality (remove caches/logs)
   *Reason:* Ensure correct imports and commands after restructuring, cleanup script for convenience

3. Docker Enhancement
   - Added `backend/Dockerfile` for FastAPI service
   - Extended `docker-compose.yml`:
     • API, Bot, WebUI, Postgres services
     • Persisted Postgres data in volume
   *Reason:* Containerized development with database support for users and tasks

4. Database Integration
   - Added `requirements.txt` dependencies: `sqlalchemy`, `databases`, `asyncpg`, `python-jose`, `passlib`...
   - Created `backend/src/api/db.py` for DB connection loading from `.env`
   - Defined SQLAlchemy tables in `models.py`: `users`, `chats`, `tasks`
   *Reason:* Persistent storage for authentication, chat history, and background tasks

5. Authentication
   - Implemented `auth.py` router with `/auth/register` and `/auth/login` using JWT and bcrypt
   - Added dependency `get_current_user` for protected endpoints
   - Seeded default `admin` (admin:admin) and `user` (user:user) on startup in `main.py`
   *Reason:* Secure API access, role-based functionality

6. Chat Persistence
   - Updated `/chat` endpoint to require JWT, save messages to `chats` table
   - Added `/chats` GET endpoint to retrieve history
   - Frontend: AuthContext for JWT, localStorage+backend sync in `ChatLayout.jsx`
   *Reason:* Maintain chat state between sessions and across devices

7. Background Tasks via WebSocket
   - Added WebSocket endpoint `/ws/tasks` to accept JSON tasks, store in `tasks` table, send progress updates (pending → parsing → executing → finalizing → completed)
   - Frontend placeholder to open `TasksModal` on “Zadaci” button click
   *Reason:* Real-time task orchestration and status reporting

8. Frontend Enhancements
   - Wrapped `App` in `BrowserRouter` & `AuthProvider`
   - Added `Login.jsx` and `Register.jsx` components with forms
   - Configured routing: `/login`, `/register`, `/` (protected)
   - Inserted “Zadaci” button, placeholder `TasksModal`, and Admin Panel toggle in `ChatLayout.jsx`
   - Proxy configured in `package.json` for development api calls
   *Reason:* Complete authentication flow, user vs admin dashboards, extendable UI for tasks

Next Steps
----------
- Implement `TasksModal.jsx` with textarea, submit button, and WebSocket client
- Create `AdminPanel.jsx` for administrator-only actions
- Finalize front-end access control and polish UX
- Add additional unit/integration tests for new endpoints and components

// 2025-05-06: Implementing AdminPanel tab navigation and Settings panel
- Created `AdminSettingsPanel.jsx` for GET/POST `/admin/settings` with CPU/GPU toggles
- Updated `AdminPanel.jsx` to include tab navigation: Users, Tasks, Resources, Settings
- Integrated `UsersList.jsx`, `TasksList.jsx`, `ResourcesPanel.jsx`, and `AdminSettingsPanel.jsx` into AdminPanel
- Tested that only admins can access `/admin` route and tabs
- Planning to remove any unused skeleton code after confirmation
